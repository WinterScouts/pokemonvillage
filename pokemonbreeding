var ss = SpreadsheetApp.getActiveSpreadsheet();
var breed = ss.getSheetByName("Breeding");
var speciesprintrange = ["L4", "L5", "L6", "L7", "L8", "L9", "L10"]; //range to print what species are rolled, final slot will always generally be hybrid if it's available.
var breedpkmnrange = ["C4", "C5", "C6", "E4", "E5", "E6"];
var breedpkmnrangetrait = ["C7", "C8", "C9", "E7", "E8", "E9"];
var berries = ["G4", "G5", "G6", "G7"];
var validrange = []
var odds = 4; //this is where the odds are stored, by default 1/4 if only one parent has the trait. Easily changed here.
function rollThing(parentsNum, traitRoll) {
  if (parentsNum > 0) {
    var rngJesus = Math.floor(Math.random() * odds) + 1;
    if (rngJesus <= parentsNum) {
      traitRoll++;
    }
  }
  return traitRoll
}
function rollThingHybrid(parentsNum, traitRoll, isHybrid) {
  if (parentsNum > 0) {
    var rngJesus = Math.floor(Math.random() * odds) + 1;
    if (rngJesus <= parentsNum) {
      traitRoll++;
      isHybrid = true;
    }
  }
  return [traitRoll, isHybrid]
}
function traitFinder(numofHybrids, numofMutants, numofDelta, numofShiny) {
  var hybridcheck = 0;
  for (var i = 0; i < breedpkmnrange.length; i++) {
    if (breed.getRange(breedpkmnrange[i]).getValue() != "") {
      validrange.push(breed.getRange(breedpkmnrange[i]).getValue());
      hybridcheck++;
    }
    if ((i + 1) % 3 == 0 && hybridcheck > 1) {
      numofHybrids++;
      hybridcheck = 0;
    }
    else if ((i + 1) % 3 == 0) {
      hybridcheck = 0;
    }

  }
  for (var k = 0; k < breedpkmnrangetrait.length; k++) {
    if ((k == 0 || k == 3) && breed.getRange(breedpkmnrangetrait[k]).getValue().toString().toLowerCase() == "yes") {
      numofShiny++;
    }
    else if ((k == 1 || k == 4) && breed.getRange(breedpkmnrangetrait[k]).getValue().toString().toLowerCase() == "yes") {
      numofMutants++;
    }
    else if ((k == 2 || k == 5) && breed.getRange(breedpkmnrangetrait[k]).getValue().toString().toLowerCase() == "yes") {
      numofDelta++;
    }
  }

  if (berries.length > 1) {
    for (var p = 0; p < berries.length; p++) {
      if (breed.getRange(berries[p]).getValue().toString().toLowerCase() == "hybrid") {
        numofHybrids++;
      }
      else if (breed.getRange(berries[p]).getValue().toString().toLowerCase() == "mutant") {
        numofMutants++;
      }
      else if (breed.getRange(berries[p]).getValue().toString().toLowerCase() == "shiny") {
        numofShiny++;
      }
      else if (breed.getRange(berries[p]).getValue().toString().toLowerCase() == "delta") {
        numofDelta++;
      }
    }
  }
  return [numofHybrids, numofMutants, numofDelta, numofShiny];
}
function clearCell() {
  var rangestoClear = ["I4", "L4", "L5", "L6", "L7", "L8", "L9", "L10", "J9", "J10", "J11", "J12"];
  for (var i = 0; i < rangestoClear.length; i++) {
    breed.getRange(rangestoClear[i]).clearContent();
  }
}

function beginBreeding() {
  clearCell()
  var clutch = Math.floor(Math.random() * 7) + 2;
  var numofHybrids = 0; var numofMutants = 0; var numofShiny = 0; var numofDelta = 0;
  //Checking what parent one's pokemon are, and if they have hybrid or not.
  [numofHybrids, numofMutants, numofDelta, numofShiny] = traitFinder(numofHybrids, numofMutants, numofDelta, numofShiny);
  breedpkmnrange = validrange
  var numhybrids = 0; var nummutants = 0; var numdelta = 0; var numshiny = 0;
  var speciesrolled = []

  for (var creturs = 0; creturs < clutch; creturs++) {
    var hybridbaby = false;
    [numhybrids, hybridbaby] = rollThingHybrid(numofHybrids, numhybrids, hybridbaby);
    nummutants = rollThing(numofMutants, nummutants);
    numdelta = rollThing(numofDelta, numdelta);
    numshiny = rollThing(numofShiny, numshiny);
    if (hybridbaby == false) {
      var rolledSpecies = Math.floor(Math.random() * breedpkmnrange.length);
      speciesrolled.push(breedpkmnrange[rolledSpecies]);
    }
  }
  var currentnum = 0;
  for (var l = 0; l < breedpkmnrange.length; l++) {
    var numofspecies = 0;
    for (var u = 0; u < speciesrolled.length; u++) {
      if (breedpkmnrange[l] == speciesrolled[u]) {
        numofspecies++;
      }
    }
    if (numofspecies > 0) {
      breed.getRange(speciesprintrange[currentnum]).setValue(breedpkmnrange[l] + " x" + numofspecies);
      currentnum++;
    }
  }
  if (numhybrids >= 1) {
    breed.getRange(speciesprintrange[currentnum]).setValue("Hybrid x" + numhybrids);
  }
  breed.getRange("J9").setValue(numshiny);
  breed.getRange("J10").setValue(nummutants);
  breed.getRange("J11").setValue(numdelta);
  breed.getRange("I4").setValue(clutch);
}
